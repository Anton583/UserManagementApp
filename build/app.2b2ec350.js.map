{"version":3,"sources":["db/user.ts","utilities.ts","app.ts"],"names":[],"mappings":"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","file":"app.2b2ec350.js","sourceRoot":"..\\src","sourcesContent":["class User {\r\n    name: string\r\n    surname: string = \"\"\r\n    yearOfBirth: number\r\n    pavelDurovVisits: number = 0\r\n\r\n    constructor(name: string, yearOfBirth: number) {\r\n        this.name = name;\r\n        this.yearOfBirth = yearOfBirth;\r\n    }\r\n\r\n    asString(): string {\r\n        return this.getUserFullname() + \", \" + this.yearOfBirth + \", Pasha visited \" + this.pavelDurovVisits + \" times.\"\r\n    }\r\n\r\n    setSurname(surname: string) {\r\n        this.surname = surname;\r\n        return this;\r\n    }\r\n    updateDurovVisits(newVisits: number) {\r\n        this.pavelDurovVisits = newVisits;\r\n        return this;\r\n    }\r\n\r\n    getUserFullname() {\r\n        return this.name + \" \" + this.surname;\r\n    }\r\n\r\n    getUserAgeOfBirth() {\r\n        return this.yearOfBirth\r\n    }\r\n\r\n    clone(clone: User): User {\r\n        const clonedUser = new User(this.name, this.yearOfBirth).setSurname(\r\n            this.surname\r\n        );\r\n\r\n        clonedUser.pavelDurovVisits = this.pavelDurovVisits;\r\n        return clonedUser;\r\n    }\r\n}\r\n\r\n// dz:\r\n// - findUsersByAge (move to findUsers() form, just like finUsersByName)\r\n// - Assuming today 2019, find all users in particular age range (16, 41)\r\n// - Function to Add multiple users by their names and ages\r\n//   (its  argument is array in form of [[\"name\", 1985], [\"name2\", 1981]])\r\n//   returns array of their IDs\r\n// - Function which renames user with given id (arguments are: userID, newName)\r\n// - Given an array of user IDs, return an array of users (with fitting IDs)\r\n//   (getUsersByIDs)\r\n\r\n// tsc *.ts --outFile output/app.js --strict\r\n\r\n\r\n// User:\r\n// Name\r\n// Surname\r\n// Year of birth\r\n// Avatar link\r\n\r\n// addUser :: (name, yearOfBirth) -> id\r\nexport const getUserId = (users: Array<User>) => {\r\n    const ids: Array<number> = []\r\n    for (let i = 0; i = users.length - 1; i++) {\r\n        ids.fill(users.indexOf(users[i]), 0, users.length - 1)\r\n    }\r\n    return ids\r\n}\r\n\r\nconst addUser = (newName: string, newYearOfBirth: number, users: Array<User>) => {\r\n    const newUser = new User(newName, newYearOfBirth);\r\n    const newID = users.push(newUser) - 1;\r\n    return newID;\r\n};\r\n\r\ntype UserPredicate = (u: User) => boolean\r\n\r\n// f = user => Bool\r\n\r\nconst findUsers = (users: Array<User>, f: UserPredicate) => {\r\n    const userIDsWithMatchingName = [];\r\n    for (let index = 0; index < users.length; index = index + 1) {\r\n        const u: User = users[index]\r\n        if (f(u)) {\r\n            userIDsWithMatchingName.push(index);\r\n        }\r\n    }\r\n\r\n    return userIDsWithMatchingName;\r\n};\r\n\r\n\r\n// UserID = number\r\n// SearchedName = String\r\n// findUsersByName :: SearchedName -> [UserID]\r\n\r\nconst findUsersByName = (searchedName: string, users: Array<User>) =>\r\n    findUsers(users, user => {\r\n        const userFullName = user.getUserFullname().toLowerCase();\r\n        return userFullName.includes(searchedName.toLowerCase());\r\n    });\r\n\r\n// Age = number\r\n// findUsersByAge :: Age -> [UserID]\r\n\r\nconst findUsersByAge = (minAge: number, maxAge: number, users: Array<User>) =>\r\n    findUsers(users, user => {\r\n        const userAge = 2019 - user.yearOfBirth;\r\n        return (userAge >= minAge) && (userAge <= maxAge);\r\n    });\r\n\r\n// - Function to Add multiple users by their names and ages\r\n//   (its  argument is array in form of [[\"name\", 1985], [\"name2\", 1981]])\r\n//   returns array of their IDs\r\n\r\nconst addUsers = (newUsers: Array<[string, number]>, users: Array<User>): Array<number> => {\r\n    let ids: Array<number> = []\r\n    for (const newUser of newUsers) {\r\n        const id = addUser(newUser[0], newUser[1], users)\r\n        ids.push(id)\r\n\r\n    }\r\n    return ids\r\n}\r\n\r\nfunction removeUserByID(userID: number, users: Array<User>) {\r\n    users.splice(userID, 1)\r\n    return users\r\n}\r\n\r\n\r\n\r\nfunction renameUser(userID: number, newName: string, users: Array<User>) {\r\n    const previousInfo = users[userID];\r\n    previousInfo.name = newName;\r\n    return users[userID];\r\n}\r\n\r\n\r\n// - Given an array of user IDs, return an array of users (with fitting IDs)\r\n// (getUsersByIDs)\r\n\r\nfunction getUsersByIDs(IDs: Array<number>, users: Array<User>): Array<[number, User]> {\r\n    const finalArrayOfUsers: Array<[number, User]> = []\r\n    for (const iD of IDs) {\r\n        finalArrayOfUsers.push([iD, users[iD]])\r\n    }\r\n    return finalArrayOfUsers\r\n}\r\n\r\nfunction getUserNameById(ID: number, users: Array<User>) {\r\n    const user = users[ID]\r\n    return user.name\r\n}\r\nexport function getUserNamesByIds(IDs: Array<number>, users: Array<User>) {\r\n    const names: Array<string> = []\r\n    for (const ID of IDs) {\r\n        return names.fill(users[ID].name, 0, names.length - 1)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport { User, findUsersByName, getUsersByIDs, addUser, getUserNameById, removeUserByID }","\r\n\r\n// All types of buttons available on the page\r\nexport enum ButtonType {\r\n    Search,\r\n    Add,\r\n    Remove,\r\n    ShowAll,\r\n    Submit\r\n\r\n}\r\n\r\nexport const getResultField = () => document.getElementById(\"queryResult\")\r\nexport const getInputField = () => document.getElementById(\"inputField\") as HTMLInputElement\r\n\r\nexport const makeP = text => \"<p>\" + text + \"</p>\"\r\nexport const makeTBodyEl = (dataN, dataId, dataDOB, dataPDV) => {\r\n    \"<td>\" + dataN + \"</td>\"\r\n    \"<td>\" + dataId + \"</td>\"\r\n    \"<td>\" + dataDOB + \"</td>\"\r\n    \"<td>\" + dataPDV + \"</td>\"\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const getButtonByType = (type: ButtonType): HTMLAnchorElement => {\r\n    let buttonID = \"\";\r\n    switch (type) {\r\n        case ButtonType.Add:\r\n            buttonID = \"addBtn\"\r\n            break\r\n        case ButtonType.Remove:\r\n            buttonID = \"removeBtn\"\r\n            break\r\n        case ButtonType.Search:\r\n            buttonID = \"searchBtn\"\r\n            break\r\n        case ButtonType.ShowAll:\r\n            buttonID = \"showAllBtn\"\r\n            break\r\n        // Same as ButtonType.Submit\r\n        default:\r\n            buttonID = \"submitBtn\"\r\n    }\r\n\r\n    return document.getElementById(buttonID) as HTMLAnchorElement\r\n}\r\n\r\n// Clear result, input fields, hide submission button\r\nexport const clearPage = () => {\r\n    getResultField().innerHTML = \"\"\r\n    getInputField().value = \"\"\r\n\r\n    setSubmitButtonVisibility(false)\r\n}\r\n\r\nexport const setSubmitButtonVisibility = (isVisible: boolean) =>\r\n    getButtonByType(ButtonType.Submit).style.display = isVisible ? \"inline-block\" : \"none\"\r\n","\r\nimport { User, findUsersByName, getUsersByIDs, addUser, getUserNameById, removeUserByID, getUserId, getUserNamesByIds } from \"./db/user\"\r\nimport { getButtonByType, ButtonType, getInputField, makeTBodyEl, getResultField, makeP, clearPage, setSubmitButtonVisibility } from \"./utilities\"\r\n\r\nconst users: Array<User> = [\r\n    new User(\"Petr\", 2002).setSurname(\"Vlasov\").updateDurovVisits(6),\r\n    new User(\"Stas\", 1951).setSurname(\"Petrov\").updateDurovVisits(2),\r\n    new User(\"Slava\", 1984).setSurname(\"Vlavla\")\r\n]\r\n\r\nconst searchCard = (queryText: string) => {\r\n    const searchResult: [number, User][] = getUsersByIDs(findUsersByName(queryText, users), users)\r\n    for (const [userID, user] of searchResult)\r\n        getResultField().innerHTML += makeP(\"ID: \" + userID + \" | \" + user.asString())\r\n}\r\n\r\n// const removeCard = (queryText: string) => {\r\n//     const input: string = queryText.split(\" \")[0]\r\n//     const userId: number = parseFloat(input)\r\n//     const removedUserArr = removeUserByID(userId, users)\r\n//     const userNames = getUserNamesByIds(getUserId(users), users)\r\n//     const toSingleNames = userNames.values().toString()\r\n//     const removeRes = getUsersByIDs(findUsersByName(toSingleNames, removedUserArr), users)\r\n//     if (users[userId])\r\n//         for (const [otherIds, user] of removeRes) {\r\n//             getResultField().innerHTML = makeP(\"ID: \" + otherIds + \" | \" + user.asString())\r\n//         }\r\n//     else\r\n//         getResultField().innerHTML = \"Please, write the existing Id of user!\"\r\n// }\r\n\r\n\r\nconst addCard = (queryText: string) => {\r\n    const newName: string = queryText.split(\" \")[0]\r\n    const newYearOfBirth: number = parseFloat(queryText.split(\" \")[1])\r\n    const input = newName + \" \" + newYearOfBirth\r\n    if (queryText !== input) {\r\n        getResultField().innerHTML = \"Please, write name, space bar, year of birth!\"\r\n        return\r\n    }\r\n    const newUser: number = addUser(newName, newYearOfBirth, users)\r\n    const resOutput = getUsersByIDs([newUser], users)\r\n\r\n    for (const [userID, user] of resOutput)\r\n        if (queryText === input)\r\n            getResultField().innerHTML = makeP(\"ID: \" + userID + \" | \" +\r\n                user.asString())\r\n}\r\n\r\n\r\n\r\n\r\nconst init = () => {\r\n\r\n    clearPage()\r\n\r\n    console.log(getUserNamesByIds(getUserId(users), users))\r\n\r\n    getButtonByType(ButtonType.ShowAll).onclick = (ev: MouseEvent) => {\r\n        const btn = getButtonByType(ButtonType.ShowAll)\r\n        btn.innerHTML = \"Show All\"\r\n        getInputField().style.display = \"none\"\r\n        document.getElementById(\"submitBtn\").style.display = \"none\"\r\n        document.getElementById(\"hiddenDiv\").style.display = \"block\"\r\n        const table = document.getElementById(\"tInfoB\")\r\n        document.getElementById(\"showAllBtn\").removeAttribute(\"style\")\r\n        document.getElementById(\"addBtn\").style.opacity = \"0.5\"\r\n        document.getElementById(\"searchBtn\").style.opacity = \"0.5\"\r\n        document.getElementById(\"removeBtn\").style.opacity = \"0.5\"\r\n        table.innerHTML = \"\"\r\n        for (const user of users) {\r\n            const userName = user.name\r\n            const dateOfBAsStr = (user.yearOfBirth).toString()\r\n            const pavelDVisitsAsStr = (user.pavelDurovVisits).toString()\r\n            const idAsStr = users.indexOf(user)\r\n            table.innerHTML += table.appendChild(document.createElement(\"tr\")).innerHTML =\r\n                '<td class=\"col s3\">' + userName + \"</td>\" +\r\n                '<td class=\"col s3\">' + idAsStr + \"</td>\" +\r\n                '<td class=\"col s3\">' + dateOfBAsStr + \"</td>\" +\r\n                '<td class=\"col s3\">' + pavelDVisitsAsStr + \"</td>\"\r\n        }\r\n        clearPage()\r\n    }\r\n\r\n    getButtonByType(ButtonType.Add).onclick = (ev: MouseEvent) => {\r\n        const btn = getButtonByType(ButtonType.Submit)\r\n        const inputField: HTMLInputElement = getInputField()\r\n        document.getElementById(\"addBtn\").removeAttribute(\"style\")\r\n        document.getElementById(\"showAllBtn\").style.opacity = \"0.5\"\r\n        document.getElementById(\"searchBtn\").style.opacity = \"0.5\"\r\n        document.getElementById(\"removeBtn\").style.opacity = \"0.5\"\r\n        btn.innerHTML = \"Add\"\r\n        if (getInputField().style.display || document.getElementById(\"submitBtn\").style.display\r\n            === \"none\") {\r\n            getInputField().style.display = \"block\"\r\n            document.getElementById(\"submitBtn\").style.display = \"block\"\r\n        }\r\n        if (document.getElementById(\"hiddenDiv\").style.display === \"block\")\r\n            document.getElementById(\"hiddenDiv\").style.display = \"none\"\r\n        clearPage()\r\n    }\r\n\r\n\r\n\r\n    getButtonByType(ButtonType.Remove).onclick = (ev: MouseEvent) => {\r\n        const btn = getButtonByType(ButtonType.Submit)\r\n        btn.innerHTML = \"Remove\"\r\n        document.getElementById(\"removeBtn\").removeAttribute(\"style\")\r\n        document.getElementById(\"addBtn\").style.opacity = \"0.5\"\r\n        document.getElementById(\"searchBtn\").style.opacity = \"0.5\"\r\n        document.getElementById(\"showAllBtn\").style.opacity = \"0.5\"\r\n        if (getInputField().style.display || document.getElementById(\"submitBtn\").style.display\r\n            === \"none\") {\r\n            getInputField().style.display = \"block\"\r\n            document.getElementById(\"submitBtn\").style.display = \"block\"\r\n            if (document.getElementById(\"hiddenDiv\").style.display === \"block\")\r\n                document.getElementById(\"hiddenDiv\").style.display = \"none\"\r\n        }\r\n        clearPage()\r\n    }\r\n\r\n\r\n\r\n\r\n    getButtonByType(ButtonType.Search).onclick = (ev: MouseEvent) => {\r\n        const btn = getButtonByType(ButtonType.Submit)\r\n        btn.innerHTML = \"Search\"\r\n        document.getElementById(\"searchBtn\").removeAttribute(\"style\")\r\n        document.getElementById(\"addBtn\").style.opacity = \"0.5\"\r\n        document.getElementById(\"removeBtn\").style.opacity = \"0.5\"\r\n        document.getElementById(\"showAllBtn\").style.opacity = \"0.5\"\r\n        if (getInputField().style.display || document.getElementById(\"submitBtn\").style.display\r\n            === \"none\") {\r\n            getInputField().style.display = \"block\"\r\n            document.getElementById(\"submitBtn\").style.display = \"block\"\r\n        }\r\n        if (document.getElementById(\"hiddenDiv\").style.display === \"block\")\r\n            document.getElementById(\"hiddenDiv\").style.display = \"none\"\r\n        clearPage()\r\n\r\n    }\r\n\r\n    window.onload = function () { document.getElementById(\"searchBtn\").removeAttribute(\"style\") }\r\n\r\n    getButtonByType(ButtonType.Submit).onclick = (ev: MouseEvent) => {\r\n        const inputField: HTMLInputElement = getInputField()\r\n        const queryText = inputField.value\r\n        const elem = getButtonByType(ButtonType.Submit) as HTMLAnchorElement\r\n        const submitText = elem[\"outerText\"].toUpperCase()\r\n\r\n        clearPage()\r\n\r\n        switch (submitText) {\r\n            case \"SEARCH\":\r\n                searchCard(queryText)\r\n                break\r\n            case \"ADD\":\r\n                addCard(queryText)\r\n                break\r\n            // case \"REMOVE\":\r\n            //     removeCard(queryText)\r\n            //     break\r\n\r\n            default:\r\n                console.error(\"What the hell did u just do? UNIMPLEMENTED!\")\r\n                break\r\n        }\r\n    }\r\n\r\n    getInputField().oninput = (ev: InputEvent) => {\r\n        const newInputValue = (ev.target as HTMLInputElement).value\r\n\r\n        if (newInputValue.length < 1)\r\n            setSubmitButtonVisibility(false)\r\n        else\r\n            setSubmitButtonVisibility(true)\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ninit();\r\n\r\n// DZ:\r\n// Try to center out the input and result fields DONE\r\n// Extra: input & result fields should be centered out both when SUBMIT button is visible and not DONE\r\n// Selected activity (Search/Add/Remove/Show All) button should be highlighted in some other color\r\n// (HINT: add/remove color class https://materializecss.com/color.html)\r\n// Add \"Remove button\" functionality\r\n//  In the input field, user can write the ID of the user to delete\r\n//  This deletes the user by ID from DB (if user is found, otherwise display error message) \r\n//  and prints all remaining users in the result field\r\n// Create a 4th button: \"Show All\" users. DONE\r\n//  If you click it, the input field is gone, and only resultField is visible, where you can see all the users DONE\r\n// Move user output formatting to table (https://materializecss.com/table.html) DONE"]}